/** setTableId(sTableId) getTableId() -- returns table id insertColumn(iColIndex,ColName) -- inserts a new column at given column index insertRow(iRowPos) -- insert a new row at given row index setRowHeight(iHeight) -- sets row height getRowCount() -- returns row count getColCount() -- returns col count setColCount(iColCount) - setRowCount(iRowCount) setTableHeight(iHeight) setTableWidth(iWidth) getValueAt(iRowId,iColIndex) setValueAt(iRowId,iColIndex,Value) hideColumn(iColIndex) showColumn(iColIndex) deleteRow(iRowPos) deleteColumn(iColIndex) addRow() **/function sTable(sTableId){    /*var TYPE_DISPLAY = 0;     var TYPE_STRING = 1;     var TYPE_NUMERIC = 2;     var TYPE_FLOAT = 3;     var TYPE_DATE = 4;     var TYPE_COMBOBOX = 5;//TYPE_COMBOBOX     var TYPE_CHECKBOX = 6;     var TYPE_RADIO = 7;     var TYPE_IMAGE = 8;     var TYPE_HIDDEN = 9;     var TYPE_SIMPLECOMBO = 10;     var TYPE_SPINFIELD = 11;     var TYPE_BUTTON = 12;     var TYPE_COMBOBOX2 = 13;     var TYPE_ACTIONS = 14;*/    var me = this;    this.objTable = null;    this.isTBodyExists = true;    this.setTableId = function(sTableId)    {        this.sTableId = sTableId;        //this.objDiv = document.createElement("DIV");        this.objTable = document.getElementById(sTableId);//        this.objTable = document.getElementById("tbl_empDetailsRes");//        alert("tble obj===="+this.objTable)        this.objTBody=null;        this.objTBody = this.objTable.tBodies[0];        if (!this.objTBody)        {            this.objTBody = this.objTable;            this.isTBodyExists = false;        }        //if(this.objTable.parentNode.nodeName=='DIV')        //this.objDiv = this.objTable.parentNode;        //this.objDiv.id = "div"+this.sTableId;     };    this.getTableId = function()    {        return this.sTableId;    };    this.hideFirstRow=function()    {        var objRow=me.objTBody.rows[0];        sTable.setFirstRow(me,me.sTableId,objRow);        me.objTBody.deleteRow(0);    };    this.setTableHeight = function(iHeight)    {        this.objTable.style.height = iHeight;    };    this.setTableWidth = function(iWidth)    {        this.objTable.style.width = iWidth;    };    this.setRowHandler = function(sRowHandler)    {        me.sRowHandler = sRowHandler;        //alert(me.sRowHandler+","+me.sTableId)    };    this.getRowHandler = function()    {        return me.sRowHandler;    };    this.setCurrentRow = function(iCurrentRow)    {        if (iCurrentRow >= 0)        {            // alert(iCurrentRow+"===="+me.objTBody.);            me.objTable.setAttribute("currentrow", iCurrentRow);            //            alert(me.objTable.getAttribute("prevrow"))            //if (me.objTable.getAttribute("prevrow") != null)            var objPrevRow=me.objTBody.rows[me.objTable.getAttribute("prevrow")];            if(objPrevRow)                util.removeClass(me.getHighlightNode(objPrevRow), "sSelectedRow");            util.addClass(me.getHighlightNode(me.objTBody.rows[iCurrentRow]), "sSelectedRow");            me.objTable.setAttribute("prevrow", iCurrentRow);            //alert((typeof me.sRowHandler)+","+me.sTableId)        }    };    this.getCurrentRow = function()    {        var sCurrentRow = this.objTable.getAttribute("currentrow");        if (sCurrentRow != null && sCurrentRow >= 0)            return parseInt(sCurrentRow);        return -1;    };    this.getHighlightNode=function(objRow,isNewRow)    {        if(me.objTable.getAttribute("isEditable"))        {            var iCellIndex=0;            if(isNewRow)            {                if((iCellIndex+1) < objRow.childNodes.length && objRow.childNodes[iCellIndex].style.display=="none")                    iCellIndex++;                return objRow.childNodes[iCellIndex];            }            else            {                if((iCellIndex+1) < objRow.cells.length && objRow.cells[iCellIndex].style.display=="none")                    iCellIndex++;                return objRow.cells[iCellIndex];            }        }        else            return objRow;    };    this.setLastRow = function(iLastRow)    {        if (iLastRow >= 0)            this.objTable.setAttribute("lastrow", iLastRow);    };    this.getLastRow = function()    {        var sLastRow = this.objTable.getAttribute("lastrow");        if (sLastRow != null && sLastRow >= 0)            return parseInt(sLastRow);        return -1;    };    // inserts a new column    this.insertColumn = function(iColIndex, sColName)    {        var objTR,objTD,objTextNode;        var iRowCount = this.getRowCount();        for (var i = 0; i < iRowCount; i++)        {            objTR = this.objTBody.rows[i];            if (!iColIndex)                objTD = objTR.insertCell(objTR.cells.length);            else                objTD = objTR.insertCell(iColIndex - 1);            objTextNode = document.createTextNode('Col' + i)            objTD.appendChild(objTextNode);        }    };    this.createDisplayRow = function(iRowPos,iNoOfCells,arrCellValues)    {        var iInsertIndex;        if (iRowPos >= 0)            iInsertIndex = iRowPos;        var objTr=me.objTBody.insertRow(iRowPos);        for(var i=0; i < iNoOfCells; i++)        {            var objTd=objTr.insertCell(i);            if(arrCellValues && arrCellValues[i])                objTd.appendChild(document.createTextNode(arrCellValues[i]));            else                objTd.appendChild(document.createTextNode("&nbsp;"));        }        me.updateRowSequence();    };    this.insertRow = function(iRowPos)    {        var iInsertIndex;        if (iRowPos >= 0)            iInsertIndex = iRowPos;        else            iInsertIndex = this.getCurrentRow() + 1;        this.ensureCapacity(this.getRowCount() + 1, iInsertIndex);        this.updateRowSequence();    };    this.setRowHeight = function(iHeight)    {        for (var i = 0; i <= this.getRowCount(); i++)            this.objTBody.rows[i].style.height = iHeight + "px";    };    this.getRow = function(iIndex)    {        return this.objTBody.rows[iIndex];    };    this.getRowCount = function()    {        return this.objTBody.rows.length;    };    /*this.getActualRowIndex=function(iRowIndex)     {     if(this.isTBodyExists)     return iRowIndex;     else     return iRowIndex-1;     };*/    this.getColCount = function(iColCountRow)    {        /*if (me.objTable.tHead && me.objTable.tHead.length > 0)         return me.objTable.tHead.rows[0].cells.length;         else*/        var iIndex=0;        if(iColCountRow!=null)            iIndex=iColCountRow;        if (me.objTable.tBodies[0].rows.length > 0)            return me.objTable.tBodies[0].rows[iIndex].cells.length;        return 0;    };    this.hideColumn = function(iColIndex)    {        if (iColIndex >= 0)        {            var iRowCount = this.getRowCount();            // alert(this.objTable.tHead.innerHTML)            this.objTable.tHead.rows[0].cells[iColIndex].style.display = "none";            for (var i = 0; i < iRowCount; i++)                this.objTBody.rows[i].cells[iColIndex].style.display = "none";        }    };    this.showColumn = function(iColIndex)    {        if (iColIndex >= 0)        {            var iRowCount = this.getRowCount();            if (this.objTable.tHead)                this.objTable.tHead.rows[0].cells[iColIndex].style.display = "table-cell";            for (var i = 0; i < iRowCount; i++)            {                this.objTBody.rows[i].cells[iColIndex].style.display = "table-cell";            }        }    };    this.getTableHeader = function()    {        if (this.isTBodyExists) /*&& this.objTable.tHead.length > 0)*/            return this.objTable.tHead.rows[0];        return null;    };    this.getHeaderElementAt = function(iColIndex)    {        if (iColIndex >= 0)        {            var objTD;            if (this.isTBodyExists) /*&& this.objTable.tHead.length > 0)*/                objTD = this.objTable.tHead.rows[0].cells[iColIndex];            for (var i = 0; i < objTD.childNodes.length; i++)            {                if (objTD.childNodes[i].nodeType == 1)                {                    if(objTD.childNodes[i].className=="thChkBox")                        return objTD.childNodes[i].getElementsByTagName("INPUT")[0];                    else                        return objTD.childNodes[i];                }            }            return objTD;        }    };    this.getElementAt = function(iRowIndex, iColIndex,iColTypeRow)    {        // alert("getElementAt "+iRowIndex+"-"+iColIndex)        // alert(isNaN(iRowIndex)+"-----"+isNaN(iColIndex)+"  "+(iRowIndex && iColIndex && !isNaN(iRowIndex) && !isNaN(iColIndex)));        if (iRowIndex >= 0 && iColIndex >= 0)        {             if(iColTypeRow==null)                iColTypeRow=0;            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];            var iColType = this.objTBody.rows[iColTypeRow].cells[iColIndex].getAttribute("coltype");            if(iColType==TYPE_DISPLAY)            {                for (var i = 0; i < objTD.childNodes.length; i++)                {                    if(objTD.childNodes[i].nodeType==1)                        return objTD.childNodes[i];                }            }            else            {                var objElements=objTD.getElementsByTagName("INPUT");                if(objElements.length>0)                    return objElements[0];                objElements=objTD.getElementsByTagName("A");                if(objElements.length>0)                    return objElements[0];            }        }        return objTD;    };    /*this.getValueAt = function(iRowIndex,iColIndex,sNodeName,isGetHTMLContent)     {     if( iRowIndex>=0  && iColIndex>=0)     {     var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];     for(var i=0;i < objTD.childNodes.length;i++)     {     if(sNodeName && objTD.childNodes[i].nodeName==sNodeName.toUpperCase())     return objTD.childNodes[i].innerHTML;     else if( objTD.childNodes[i].nodeType==1 )     return objTD.childNodes[i].value;     }     if(isGetHTMLContent)     return objTD.innerHTML;     else     return  objTD.innerText;     }     };*/    this.getColType=function(iColIndex,iColTypeRow)    {        var iRowIndex=0;        if(iColTypeRow!=null)            iRowIndex=iColTypeRow;        //alert(iColIndex+"--------"+me.objTBody.rows[iRowIndex].cells[iColIndex].getAttribute("coltype"))        return parseInt(me.objTBody.rows[iRowIndex].cells[iColIndex].getAttribute("coltype"),10);    };    this.getValueAt = function(iRowIndex, iColIndex, isGetHTMLContent,iColTypeRow,iColType)    {        if (iRowIndex >= 0 && iColIndex >= 0)        {            if (isGetHTMLContent == null)                isGetHTMLContent = true;             if(iColTypeRow==null)                iColTypeRow=0;            if(iColType==null)                iColType = me.getColType(iColIndex,iColTypeRow);            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];            var i = 0;            while (i < objTD.childNodes.length)            {                if(iColType==TYPE_DISPLAY)                {                    if(objTD.childNodes[i].nodeType==1)                    {                        if (isGetHTMLContent)                            return objTD.childNodes[i].innerHTML;                        else                            return objTD.childNodes[i].innerText;                    }                }                else if (objTD.childNodes[i].nodeName== "INPUT")                {                    if (iColType >= 0)                    {                        switch (iColType)                        {                            case  TYPE_STRING:                            case  TYPE_NUMERIC:                            case  TYPE_FLOAT:                            case  TYPE_DATE:                            case  TYPE_SIMPLECOMBO:                            case  TYPE_HIDDEN:                            case  TYPE_BUTTON:                            case  TYPE_DATE_PICKER:                                return objTD.childNodes[i].value;                            case  TYPE_COMBOBOX2:                                return getComboInstance(objTD.childNodes[i].id).getSelectedItem();                            case  TYPE_CHECKBOX:                            case  TYPE_RADIO:                                return objTD.childNodes[i].checked;                        }                    }                    //if(sNodeName && objTD.childNodes[i].nodeName==sNodeName.toUpperCase())                    //  return objTD.childNodes[i].innerHTML;                    return objTD.childNodes[i].value;                }                else if(iColType == TYPE_TIME_PICKER)                {                    var elemTable = cross.getElementAt(objTD.childNodes,i),elemTd;                    elemTd = elemTable.tBodies[0].rows[0].cells[0];                    return cross.getFirstElement(elemTd.childNodes).value;                }                i++;            }            if (isGetHTMLContent)            {                if(util.trim(objTD.innerHTML) == "&nbsp;")                    return "";                else                    return util.trim(objTD.innerHTML);            }            else                return cross.getInnerText(objTD);        }    };    this.searchAndSetValueAt = function(iRowIndex, iColIndex, sValue,iColTypeRow)    {        this.setValueAt(iRowIndex, iColIndex, sValue,iColTypeRow,true);    };    this.setValueAt = function(iRowIndex, iColIndex, sValue,iColTypeRow,iSearch,isSetInnerHTML,iColType)    {        //TYPE_DISPLAY=0;TYPE_STRING=1;TYPE_NUMERIC=2; TYPE_FLOAT=3; TYPE_DATE=4;TYPE_COMBOBOX =5;//TYPE_COMBOBOX        //TYPE_CHECKBOX=6;TYPE_RADIO=7;TYPE_IMAGE=8;TYPE_HIDDEN=9;TYPE_SIMPLECOMBO=10;TYPE_SPINFIELD=11;        //TYPE_BUTTON=12;TYPE_COMBOBOX2 =13;TYPE_ACTIONS =14;        if (iRowIndex >= 0 && iColIndex >= 0) // && (sValue>=0 || sValue!="")        {            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];                        if(isSetInnerHTML)                objTD.innerHTML=sValue;            else            {                if(iColTypeRow==null)                    iColTypeRow=0;                if(iColType==null)                    iColType = me.getColType(iColIndex,iColTypeRow);                var i = 0;                while (i < objTD.childNodes.length)                {                    if (objTD.childNodes[i].nodeType == 1)                    {                        if (iColType >= 0)                        {                            switch (iColType)                            {                                case  TYPE_DISPLAY:                                {                                    objTD.childNodes[i].innerHTML = sValue;                                    return;                                }                                case  TYPE_STRING:                                case  TYPE_NUMERIC:                                case  TYPE_FLOAT:                                case  TYPE_DATE:                                case  TYPE_SIMPLECOMBO:                                case  TYPE_HIDDEN:                                case  TYPE_BUTTON:                                case  TYPE_DATE_PICKER:                                {                                    objTD.childNodes[i].value = sValue;                                    if(iColType==TYPE_FLOAT)                                    {                                        var iNoOfDec = parseInt(this.objTBody.rows[iColTypeRow].cells[iColIndex].getAttribute("noOfDec"));                                        checkNoOfDecimals(objTD.childNodes[i],iNoOfDec);                                    }                                    return;                                }                                case  TYPE_COMBOBOX2:                                {                                    if(iSearch)                                        getComboInstance(objTD.childNodes[i].id).searchAndAddItem(sValue, true,objTD.childNodes[i].id);                                    else                                        getComboInstance(objTD.childNodes[i].id).checkAndAddItem(sValue, true);                                    return;                                }                                case  TYPE_CHECKBOX:                                case  TYPE_RADIO:                                {                                    objTD.childNodes[i].checked = sValue;                                    return;                                }                                case  TYPE_TIME_PICKER:                                {                                     var elemTable  = objTD.childNodes[i],elemTd;                                     elemTd = elemTable.tBodies[0].rows[0].cells[0];                                    cross.getFirstElement(elemTd.childNodes).value = sValue;                                    return;                                }                            }                        }                    }                    i++;                }                // if no element nodes are present inside TD then setting the value to TD                objTD.innerHTML = sValue;            }        }    };    this.deleteCurrentRow = function()    {        this.deleteRow(this.getCurrentRow());    };    this.deleteRow = function(iRowPos, bIgnoreFirstRow,isClearFirstRow)    {        if (iRowPos >= 0)        {            var arrInput;            // alert(me.objTable.getAttribute("displayTable"))            if(me.objTable.getAttribute("displayTable"))            {                displayTable.stopEditing(me.sTableId);            }            else if (iRowPos == 0 && !bIgnoreFirstRow )            {                // alert("Cannot delete first row of the table");                if(isClearFirstRow)                {                    arrInput = me.objTBody.rows[iRowPos].getElementsByTagName("INPUT");                    if(arrInput[i].getAttribute("default"))                        arrInput[i].value=arrInput[i].getAttribute("default");                        else                        arrInput[i].value="";                }                else                {                    if(sTable.getFirstRow(me,me.sTableId)==null)                        sTable.setFirstRow(me,me.sTableId,me.objTBody.rows[iRowPos]);                    me.objTBody.deleteRow(iRowPos);                    me.updateRowSequence();                }                return;            }            // alert("deleting "+this.objTBody+","+this.objTable)            if (typeof window["getComboInstance"] == "function")            {                if (me.objTable.getAttribute("extrarow") && iRowPos == me.getRowCount() - 1)                    return;                arrInput = me.objTBody.rows[iRowPos].getElementsByTagName("INPUT");                var objComboHiddenFld;                for (var i = 0; i < arrInput.length; i++)                {                    if (arrInput[i].getAttribute("hiddenName")) //searching for combo column in current row and removing combo related hidden fields.                    {                        //alert(arrInput[i].getAttribute("hiddenName") +","+document.getElementById(arrInput[i].getAttribute("hiddenName")))                        objComboHiddenFld=getComboHiddenFld(arrInput[i]);                        if (objComboHiddenFld) //document.getElementById(arrInput[i].getAttribute("hiddenName")))                        {                            var td = objComboHiddenFld.parentNode;                            td .parentNode.removeChild(td);                        }                    }                }            }            //alert(this.objTBody.rows[iRowPos].outerHTML)            var iLastRowIndex=me.objTBody.parentNode.getAttribute("lastRowIndex");            //alert(iLastRowIndex+"---------"+me.getRowCount())            if(!iLastRowIndex)                me.objTBody.parentNode.setAttribute("lastRowIndex",me.getRowCount());            me.objTBody.deleteRow(iRowPos);            me.updateRowSequence();            // alert(iRowPos+","+this.getRowCount());            if (iRowPos < me.getRowCount())            {                var objInputFld = me.objTBody.rows[iRowPos].getElementsByTagName("INPUT");                if (objInputFld.length > 0 && objInputFld[0].type.toLowerCase() == "text")                    objInputFld[0].focus();                tablerow.setCurrent(me.objTBody.rows[iRowPos], me.sTableId);            }        }    };    this.deleteColumn = function(iColIndex)    {        if (iColIndex >= 0)        {            var iRowCount = this.getRowCount();            for (var i = 0; i < iRowCount; i++)                this.objTBody.rows[i].deleteCell(iColIndex);        }    };    this.selectRowColumn = function(iRowIndex, iColIndex)    {        if (iRowIndex >= 0 && iColIndex >= 0)        {            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];            var iIndex = 0;            while (iIndex < objTD.childNodes.length)            {                if (objTD.childNodes[iIndex].nodeType == 1)                {                    //objTD.className='Border';                    objTD.childNodes[iIndex].focus();                    return;                }                iIndex++;            }        }    };    this.addRow = function(iInsertRowIndex, iCloneIndex)//,objOldRow)    {        return this.ensureCapacity(this.getRowCount() + 1, iInsertRowIndex, iCloneIndex);    };    this.ensureCapacity = function (iNoOfRows, iInsertRowIndex, iCloneIndex)//,objOldRow)    {        var iRowCount = this.getRowCount();        if (this.objTable.getAttribute("extrarow"))            iRowCount--;        var iNewRowId = this.objTBody.parentNode.getAttribute("lastRowIndex");        if (!iNewRowId)            iNewRowId = iRowCount;        else            iNewRowId = parseInt(iNewRowId);        //alert(iNewRowId)        var objNewRow;        var isFirstRow=false;        if(me.objTBody.rows.length==0)        {            if(sTable.getFirstRow(me,me.sTableId)!=null)            {                objNewRow=sTable.getFirstRow(me,me.sTableId);                isFirstRow=true;            }            else                return -1;//            alert(objNewRow)//            alert(objNewRow.innerHTML)        }        else        {            var objPrevRowRef ;            if (iCloneIndex >= 0)                objPrevRowRef = this.objTBody.rows[iCloneIndex];            else                objPrevRowRef = this.objTBody.rows[iRowCount - 1];            objNewRow = objPrevRowRef.cloneNode(true);        }                var objHighlightNode=me.getHighlightNode(objNewRow,true);        if(util.hasClass(objHighlightNode,"sSelectedRow"))            util.removeClass(objHighlightNode,"sSelectedRow");        if(util.hasClass(objHighlightNode,"sHighlightedRow"))            util.removeClass(objHighlightNode,"sHighlightedRow");        if(isFirstRow)        {            me.objTBody.appendChild(objNewRow);            this.updateRowSequence();        }        /*else        {*/            //        var sRowClsName="sRowColor";//+(this.objTable.getAttribute("isEditable")?"":"1");            //        util.addClass(objHighlightNode,sRowClsName);            //        alert(objNewRow.outerHTML)            var iColLength = objNewRow.childNodes.length;            var arrFldProperties = new Array();            var objFldProperties;            var isAppendRow = false;            for (; iRowCount < iNoOfRows; iRowCount++,iNewRowId++)            {                /*for (var i = 0; i < iColLength; i++)                 {                 objFldProperties = this.updateProperties(objNewRow.childNodes[i], iNewRowId, true);                 if (objFldProperties)                 arrFldProperties[arrFldProperties.length] = objFldProperties;                 }*/                isAppendRow = false;                if (iInsertRowIndex >= 0)                {                    //alert("iInsertRowIndex="+iInsertRowIndex)                    if (iInsertRowIndex < this.objTBody.rows.length)                        this.objTBody.insertBefore(objNewRow, this.objTBody.rows[iInsertRowIndex]);                    else                        isAppendRow = true;                    //tablerow.setCurrent(this.objTable.rows[iInsertRowIndex],this.sTableId);                }                else                {                    if (this.objTable.getAttribute("extrarow"))                        this.objTBody.insertBefore(objNewRow, this.objTBody.rows[this.objTBody.rows.length - 1]);                    else                        isAppendRow = true;                    //tablerow.setCurrent(this.objTable.rows[iInsertRowIndex],this.sTableId);                }                if (isAppendRow)                    this.objTBody.appendChild(objNewRow, this.objTBody.rows[this.objTBody.rows.length - 1]);                for (var i = 0; i < iColLength; i++)                {                    objFldProperties = this.updateProperties(objNewRow.childNodes[i],iCloneIndex, iNewRowId, true);                    if (objFldProperties)                        arrFldProperties[arrFldProperties.length] = objFldProperties;                }                this.updateSeqId(objNewRow, iNewRowId);                if(objPrevRowRef != null)                {                    this.copyEvents(objPrevRowRef,objNewRow);                    objNewRow = objPrevRowRef.cloneNode(true);                }                if (arrFldProperties)/*change:for combobo box need to stop calling InstallTableAc*/                {                    //                alert(arrFldProperties[arrFldProperties.length-1].id                    //                        +","+arrFldProperties[arrFldProperties.length-1].hiddenName+","+arrFldProperties[arrFldProperties.length-1].instanceid)                    for (var iRowCnt = 0,iColType; iRowCnt < arrFldProperties.length; iRowCnt++)                    {                        iColType = arrFldProperties[iRowCnt][0];                        objFldProperties = arrFldProperties[iRowCnt][1];                        if(iColType==TYPE_COMBOBOX2)                        {                            InstallTableAc(objFldProperties.id, objFldProperties.instanceid, objFldProperties.hiddenName,null,0,objFldProperties.parentSeqId,objFldProperties.defaultValue);                            if(!objFldProperties.defaultValue)                                getComboInstance(objFldProperties.id).clearSelection();                        }                        else if(iColType==TYPE_DATE_PICKER)                            Calendar.setup({inputField    : objFldProperties.id,isTableColumn:true,align         : 'Tr',ifFormat         : objFldProperties.format});                    }                    if (iInsertRowIndex && iInsertRowIndex > 0 && objFldProperties && objFldProperties.id)                        document.getElementById(objFldProperties.id).focus();                    objFldProperties = null;                }                arrFldProperties = [];                //alert(objNewRow.outerHTML)            }            this.objTBody.parentNode.setAttribute("lastRowIndex", iNewRowId);            this.updateRowSequence();//        }         return iNewRowId        //document.write(objTable.parentNode.outerHTML)    };    ///////////////////////////////////////////////////////////////////////////////////////    this.updateProperties = function(objTD, iOldRowIndex,iNewRowId, isSetDefaultValues)//,iSequence)    {        var iOldIndex = 0;        var sId = null;        var objChildNodes = objTD.childNodes;        var arrReturn = null;        var isUpdatedDefaultValue = false;        var iArr = new Array();        var sNewInnerHTML = "";        var sInstanceId;        for (var i = 0; i < objChildNodes.length; i++)        {            //alert(objChildNodes[i].outerHTML)            //window.status="objChildNodes.length: "+iNewRowId+","+objChildNodes.length            if (objChildNodes[i].nodeType == 1)            {                sId = objChildNodes[i].id;                if (sId && sId.indexOf("[") != -1 && sId.indexOf("]") != -1)                {                    if(objChildNodes[i].getAttribute("combohidden")) //need to delete the combobox hidden field since it will be created when InstallTableAC is called.                    {                        objChildNodes[i].parentNode.removeChild(objChildNodes[i]);                        i--;                        continue;                    }                    iOldIndex = parseInt(sId.substring(sId.lastIndexOf("[") + 1, sId.lastIndexOf("]")));                    if(objChildNodes[i].getAttribute("mastertype"))                        sInstanceId=objChildNodes[i].getAttribute("instanceid");                    sNewInnerHTML = this.getNewInnerHTML(objTD.innerHTML, objChildNodes[i].id, this.getNewId(objChildNodes[i].id, iNewRowId));                    sNewInnerHTML = this.getNewInnerHTML(sNewInnerHTML, objChildNodes[i].name, this.getNewId(objChildNodes[i].name, iNewRowId));                    if (objChildNodes[i].getAttribute("mastertype"))                    {                        sNewInnerHTML = this.getNewInnerHTML(sNewInnerHTML, objChildNodes[i].getAttribute("hiddenName"), this.getNewId(objChildNodes[i].getAttribute("hiddenName"), iNewRowId));                        iArr[iArr.length] = i;                    }                    // alert("sNewInnerHTML  "+sNewInnerHTML)                    objTD.innerHTML = sNewInnerHTML;                    if (objChildNodes[i].getAttribute("mastertype"))                    {                        //                            alert(objChildNodes[i].parentNode.innerHTML)                        if(!arrReturn)                            arrReturn=[];                        arrReturn[0] = TYPE_COMBOBOX2;                        arrReturn[1] = {"id":objChildNodes[i].id,"instanceid":sInstanceId,                                        "hiddenName":objChildNodes[i].getAttribute("hiddenName"),"parentSeqId":objChildNodes[i].getAttribute("parentseqid")                                        ,"defaultValue":objChildNodes[i].getAttribute("default")};                    }                    else if(util.hasClass(objChildNodes[i],"calField")) //date picker column                    {                        if(!arrReturn)                            arrReturn=[];                        arrReturn[0] = TYPE_DATE_PICKER;                        arrReturn[1] = {"id":objChildNodes[i].id,"format":objChildNodes[i].getAttribute("format")};                        //Calendar.setup({inputField    : objChildNodes[i].id,isTableColumn:true,align         : 'Tr',ifFormat         : objChildNodes[i].getAttribute("format")});                    }                }                //replacing old values with default values                if (isSetDefaultValues)                {                    if(objChildNodes[i].getAttribute("mastertype"))                        isUpdatedDefaultValue = true;                    else                    {                        if (objChildNodes[i].nodeName == "INPUT")                        {                            if(objChildNodes[i].getAttribute("editval")) //clearing this value for display table hidden field,this attribute it will set                                objChildNodes[i].removeAttribute("editval");                                                        if (objChildNodes[i].getAttribute("default"))                            {                                objChildNodes[i].value = objChildNodes[i].getAttribute("default");                            }                            else if(objChildNodes[i].type == "checkbox")                            {                                objChildNodes[i].checked = false;                                //alert(objChildNodes[i].outerHTML)                            }                            else                                objChildNodes[i].value = "";                            isUpdatedDefaultValue = true;                        }                        else if (objChildNodes[i].nodeName == "SELECT" || objChildNodes[i].nodeName == "IMG"  || objChildNodes[i].nodeName == "A")                        {                            isUpdatedDefaultValue = true;                        }                    }                }            }        }        //        objTD.innerHTML = sNewInnerHTML;        var objComboHiddenFld;                for (var i = 0; i < iArr.length; i++)        {            objComboHiddenFld=getComboHiddenFld(objChildNodes[iArr[i]]);            //alert("objComboHiddenFld--"+objComboHiddenFld+",isSetDefaultValues"+isSetDefaultValues)            if (isSetDefaultValues && objComboHiddenFld) //document.getElementById(objChildNodes[i].getAttribute("hiddenName")))            {                objComboHiddenFld.value = "";            }        }        if (isSetDefaultValues && !isUpdatedDefaultValue)            objTD.innerHTML = "&nbsp;";        //alert("objTD  "+objTD.innerHTML)        return arrReturn;    };    this.getNewId = function(sId, iNewIndex)    {        if (sId)        {            var iIndex = sId.lastIndexOf("].") != -1 ? sId.lastIndexOf("].") : sId.lastIndexOf("]");            if (sId.indexOf("[") != -1 && iIndex != -1)                sId = sId.substring(0, sId.lastIndexOf("[") + 1) + iNewIndex + sId.substring(iIndex);            //            else            //                sId = sId + iNewIndex;            //alert("after replace------"+sId);        }        return sId;    };    this.getNewInnerHTML = function(sInnerHTML, sName, sNewName)    {        if (sName == sNewName)            return sInnerHTML;        while (sInnerHTML.indexOf(sName) >= 0)            sInnerHTML = sInnerHTML.replace(sName, sNewName);        return sInnerHTML;    };    this.getRowFromSequence = function(iSeq)    {        var sSeqId=me.objTable.getAttribute('seq');        if(!sSeqId)            return;        if (iSeq >= this.getRowCount())        {            alert("Invalid sequence: " + iSeq + ", rowcount: " + this.getRowCount());            return;        }        var clElement = document.getElementById(this.getTableId() +sSeqId+ "[" + iSeq + "]");        if (clElement)            return clElement.value;        else            return iSeq;    };    this.getSequenceFromRow = function(iRowIndex)    {        var sSeqId=me.objTable.getAttribute('seq');        if(!sSeqId)            return;        var iRowCount = this.getRowCount();        var clElement = null;        for (var iRow = 0; iRow < iRowCount; iRow++)        {            //alert(iRow+":"+document.getElementById(this.getTableId()+"Seq["+iRow+"]").value)            clElement = document.getElementById(this.getTableId() +sSeqId+ "[" + iRow + "]");            //    alert(iRowIndex+"===="+clElement.value)            if (clElement && iRowIndex == parseInt(clElement.value))                return iRow;        }        return -1;    };    this.copyEvents=function(objOldRow,objNewRow)    {        var objCell,objNode;        for(var i=0; i < objOldRow.cells.length; i++)        {            objCell=objOldRow.cells[i];            for(var j=0; j < objCell.childNodes.length; j++)            {                objNode=objCell.childNodes[j];                if(objNode.nodeType==1)                {                    if(objNode.onblur)                    {                        objNewRow.cells[i].childNodes[j].onblur=objNode.onblur;                        //alert("objNode.onblur "+objNewRow.cells[i].childNodes[j].onblur)                    }                    if(objNode.onfocus)                    {                        objNewRow.cells[i].childNodes[j].onfocus=objNode.onfocus;                        //alert("objNode.onfocus "+objNewRow.cells[i].childNodes[j].onfocus)                    }                }            }        }    };    this.updateSeqId = function(objTR, iSequence)    {        //alert(iSequence+","+objTR.innerHTML)        var sSeqId=me.objTable.getAttribute('seq');        if(!sSeqId)            return;        var sName = null;        var objChildNodes = objTR.getElementsByTagName("INPUT");        for (var i = 0; i < objChildNodes.length; i++)        {            if (objChildNodes[i].nodeType == 1)            {                sName = objChildNodes[i].name;                if (sName==sSeqId)                {                    objChildNodes[i].value = iSequence;                    break;                }            }        }    };    this.updateSeqId_old = function(objTR, iNewSeq, sValue)    {        var sSeqId=me.objTable.getAttribute('seq');        if(!sSeqId)            return;        var sId = null;        var objChildNodes = objTR.getElementsByTagName("INPUT");        for (var i = 0; i < objChildNodes.length; i++)        {            if (objChildNodes[i].nodeType == 1)            {                sId = objChildNodes[i].id;                if (sId.indexOf(sSeqId) != -1)                {                    sId = sId.substring(0, sId.indexOf("[") + 1) + iNewSeq + sId.substring(sId.indexOf("]"));                    //objChildNodes[i].Name=sId;                    objChildNodes[i].id = sId;                    if (sValue)                        objChildNodes[i].value = sValue;                    //alert(objChildNodes[i].outerHTML)                    break;                }            }        }    };    this.updateRowSequence = function()    {        if (me.objTable.getAttribute('autoSnos') || me.objTable.getAttribute('seq'))        {            var iRowCount = this.getRowCount();            var objRow;            var iRow;            if(this.getCurrentRow()-1 >=0)                iRow=this.getCurrentRow()-1;            else                iRow=0;            for ( ;iRow < iRowCount; iRow++)            {                objRow = me.objTBody.rows[iRow];                if(me.objTable.getAttribute('autoSnos'))                    objRow.cells[0].innerHTML = (iRow + 1);                if(me.objTable.getAttribute('seq'))                {                    me.updateSeqId(objRow,iRow);                }                //for(var iCol=1; iCol <= iColCount; iCol++)                //objFldProperties=this.updateSeqId(objRow,iRow-1,null);//TODO: handled for fow sequenceid updation            }        }    };    if (sTableId)        me.setTableId(sTableId);}var objTableIds = new Array();sTable.getInstance = function(sTableId){    // if (!objTableIds[sTableId])    // objTableIds[sTableId] = new sTable(sTableId);    //objTableIds[sTableId];    if (objTableIds[sTableId])        delete objTableIds[sTableId];    objTableIds[sTableId] = {"instance":new sTable(sTableId)};    return objTableIds[sTableId].instance;};sTable.setFirstRow = function(clTable,sTableId,objRow){    if(!objTableIds[sTableId])        objTableIds[sTableId]=clTable;    objTableIds[sTableId].firstRow=objRow;};sTable.getFirstRow = function(clTable,sTableId){    if(!objTableIds[sTableId])        objTableIds[sTableId]=clTable;    return objTableIds[sTableId].firstRow;};sTable.deleteInstance = function(sTableId){    if (objTableIds[sTableId])    {    delete objTableIds[sTableId]        objTableIds[sTableId] = null;    }};function removeAllTableInstances(){    var key;    var value;    for(key in objTableIds)    {  //  alert(key)        value=objTableIds[key];        // if(value.isAppScope)// in case of not app scope        delete objTableIds[key];    }    /*for(key in objComboInstances)     {     alert(key)     }*/}//////////////////////////////////////////////////////////////////////////////var tablerow = new function(){    this.setCurrent = function (objRow, sTableId, evt)    {        //alert("setting currentrow "+(objRow.rowIndex-1)+""+objRow)        var clTable = sTable.getInstance(sTableId);        var iCurrentRow=objRow.rowIndex-1;        if (clTable && clTable.getCurrentRow() != iCurrentRow)        {            if (clTable.getCurrentRow() != -1)                clTable.setLastRow(clTable.getCurrentRow());            var tbl=document.getElementById(sTableId);            if(tbl.getAttribute("hasSubHeader"))                iCurrentRow--;            clTable.setCurrentRow(iCurrentRow);        }        var sRowHandler = clTable.getRowHandler();        if (sRowHandler && typeof sRowHandler == "function")        {            //window.status="current row:"+clTable.getCurrentRow()+",last row:"+clTable.getLastRow();            evt = evt ? evt : window.event;            var objTD = evt.srcElement;            var iCellIndex = -1;            while (objTD && objTD.nodeName != "TD")                objTD = objTD.parentNode;            if (objTD)                iCellIndex = objTD.cellIndex;            //  alert(iCellIndex);            sRowHandler(clTable.getCurrentRow(), clTable.getLastRow(), iCellIndex);        }        evt = evt ? evt : window.event;        if (evt)            cross.cancelBubble(evt,true);        return true;    };    this.highlight = function (objRow, sTableId, evt)    {        var objTable = sTable.getInstance(sTableId);        objTable.getCurrentRow();        if (objTable && objTable.getCurrentRow() != objRow.rowIndex - 1)        {            //            if(objTable.getAttribute("prevHtRow"))            //                util.removeClass(objRow,"sHighlightRow");            //            objTable.setAttribute("prevHtRow",objRow);            util.addClass(objTable.getHighlightNode(objRow),"sHighlightRow");        }    };    this.clearHighlight = function (objRow, sTableId, evt)    {        var objTable = sTable.getInstance(sTableId);        util.removeClass(objTable.getHighlightNode(objRow),"sHighlightRow");    };    this.moveNext = function (objRow, sTableId, evt)    {    };    this.selectCurrentRow= function (objRow, sTableId, evt)    {        var objPrevClass;        var elemTable = objRow.parentNode;        var objTable = sTable.getInstance(sTableId);        for(var i=0;i < elemTable.childNodes.length;i++)        {            if(objTable.getHighlightNode(elemTable.childNodes[i]).className=="sSelectedRow")            {                objTable.getHighlightNode(elemTable.childNodes[i]).className = objPrevClass;                break;            }        }        objPrevClass = objTable.getHighlightNode(objRow).getAttribute("RowClassName");        objTable.getHighlightNode(objRow).className = "sSelectedRow";    };    /**     * this function is used to move rows up or down     * bMoveUp - true:moveUp , false:moveUp     * sTableId - tableId     */    this.onClkSwapRows = function(bMoveUp,sTableId)    {        var clTable,iCurRow;        clTable = sTable.getInstance(sTableId);        iCurRow = clTable.getCurrentRow();        if(iCurRow >= 0)        {            var tbdTable,trTable,iInterChanged = -1,objTable;            objTable = document.getElementById(sTableId);            tbdTable = objTable.tBodies[0];            trTable = clTable.getRow(iCurRow);            if(bMoveUp && iCurRow > 0)            {                tbdTable.insertBefore(trTable, clTable.getRow(iCurRow-1));                tablerow.setCurrent(trTable,sTableId);                iInterChanged = iCurRow-1;            }            else if(!bMoveUp && iCurRow < clTable.getRowCount()-1)            {                tbdTable.insertBefore(clTable.getRow(iCurRow+1),trTable);                tablerow.setCurrent(trTable,sTableId);                iInterChanged = iCurRow+1;            }            if(objTable.getAttribute("autoSnos"))            {                if(iInterChanged >= 0)                {                    var iValue = clTable.getValueAt(iCurRow,0);                    clTable.setValueAt(iCurRow,0,clTable.getValueAt(iInterChanged,0));                    clTable.setValueAt(iInterChanged,0,iValue);                }            }            /* if(iCurRow>=0 && iInterChanged>=0)             {             clTable.updateSeqId(trTable,iInterChanged);             clTable.updateSeqId(clTable.getRow(iCurRow),iCurRow);             }*/        }    };    /////////////////////////////// Add or Remove table row ////////////////////////////    this.add = function(sTableId, iRowIndex)    {        var objTable = sTable.getInstance(sTableId);        if (objTable && iRowIndex >=0)        {            objTable.addRow(iRowIndex+1);        }    };    this.remove = function(sTableId, iRowIndex,bIgnoreFirstRow)    {        var objTable = sTable.getInstance(sTableId);        if (objTable && iRowIndex >=0)        {            objTable.deleteRow(iRowIndex,bIgnoreFirstRow);        }    };};